!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);n(0);var r,i,a=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.add=function(e){return new t(e.x+this.x,e.y+this.y)},t.prototype.sub=function(e){return new t(this.x-e.x,this.y-e.y)},t.prototype.mult=function(e){return new t(this.x*e,this.y*e)},t.prototype.round=function(){return new t(Math.round(this.x),Math.round(this.y))},t}(),s=function(){function t(t){this._canvas=t;var e=this._canvas.getContext("2d");if(null==e)throw"Couldn't extract context from canvas";this._context=e,this._scale=this._canvas.width/1e3}return t.prototype.draw=function(t){var e=this;this._context.drawImage(t.stage,0,0,this._canvas.width,this._canvas.height),t.actors().forEach((function(n){e.draw_transform(n.view,n.coordinates,n.angle),n.sensors.forEach((function(t){return e.in_transform(n.coordinates,n.angle+t.angle,(function(e){e.beginPath(),e.moveTo(0,0),e.lineTo(0,t.distance),e.stroke(),e.fillStyle="red",e.fillRect(-5,t.value-5,10,10)}))})),e.in_transform(new a(0,0),0,(function(e){e.beginPath(),e.moveTo(n.coordinates.x,n.coordinates.y),e.lineTo(t.target.x,t.target.y),e.stroke()}))}))},t.prototype.scale=function(t){return t.mult(1/this._scale)},t.prototype.draw_transform=function(t,e,n){this.in_transform(e,n,(function(e){return e.drawImage(t,-t.width/2,-t.height/2)}))},t.prototype.in_transform=function(t,e,n){this._context.save(),this._context.scale(this._scale,this._scale),this._context.translate(t.x,t.y),this._context.rotate(e),n(this._context),this._context.restore()},t}();function o(t){return new Promise((function(e,n){var r=new Image;r.onload=function(){e(createImageBitmap(r))},r.onerror=n,r.src=t}))}function u(t){return t<i.StrongLeft}function l(t){return t>=r.TStrongLeft}!function(t){t[t.VeryClose=1]="VeryClose",t[t.Close=2]="Close",t[t.Medium=4]="Medium",t[t.Far=8]="Far",t[t.TStrongLeft=16]="TStrongLeft",t[t.TLeft=32]="TLeft",t[t.TRight=64]="TRight",t[t.TStrongRight=128]="TStrongRight",t[t.TClose=256]="TClose",t[t.TFar=512]="TFar"}(r||(r={})),function(t){t[t.VerySlow=0]="VerySlow",t[t.Slow=1]="Slow",t[t.Medium=2]="Medium",t[t.Fast=3]="Fast",t[t.StrongLeft=4]="StrongLeft",t[t.Left=5]="Left",t[t.Right=6]="Right",t[t.StrongRight=7]="StrongRight"}(i||(i={}));var c=function(){function t(t){this.intervals=t}return t.prototype.eval=function(t){var e=this.intervals;return t<e[0]||t>e[3]?0:t<e[1]?(t-e[0])/(e[1]-e[0]):t>e[2]?(t-e[3])/(e[2]-e[3]):1},t.prototype.intervals_sliced=function(t){var e=this.intervals,n=this.deval_l(t),r=this.deval_r(t);return[e[0],n,r,e[3]]},t.prototype.deval_l=function(t){return t*(this.intervals[1]-this.intervals[0])+this.intervals[0]},t.prototype.deval_r=function(t){return t*(this.intervals[2]-this.intervals[3])+this.intervals[3]},t}(),h=function(){function t(t){this.in_dist_funcs=new Map,this.in_angl_funcs=new Map,this.in_t_dist_funcs=new Map,this.output_funcs=new Map;for(var e=0;e<4;e++){var n=t.distance.slice(2*e,2*e+4);this.in_dist_funcs.set(Math.pow(2,e),new c(n))}for(e=0;e<4;e++){n=t.angle.slice(2*e,2*e+4);this.in_angl_funcs.set(Math.pow(2,e+4),new c(n))}for(e=0;e<2;e++){n=t.target_dist.slice(2*e,2*e+4);this.in_t_dist_funcs.set(Math.pow(2,e+8),new c(n))}for(e=0;e<4;e++){n=t.speed.slice(2*e,2*e+4);this.output_funcs.set(e,new c(n))}for(e=0;e<4;e++){n=t.turn.slice(2*e,2*e+4);this.output_funcs.set(e+4,new c(n))}}return t.prototype.merge_params=function(t){var e=[];if(0==t.length)return[];var n=t[0],r=this.output_funcs.get(n.param),i=r.intervals_sliced(n.value);e.push({x:i[0],y:0}),e.push({x:i[1],y:n.value});for(var a={x:i[2],y:n.value},s=1;s<t.length;s++)n=t[s],i=(r=this.output_funcs.get(n.param)).intervals_sliced(n.value),n.value>.5&&a.y>.5?(e.push(a),e.push({x:r.deval_l(.5),y:.5}),e.push({x:i[1],y:n.value})):n.value>a.y?(e.push({x:r.deval_l(a.y),y:a.y}),e.push({x:i[1],y:n.value})):(e.push(a),e.push({x:r.deval_l(1-n.value),y:n.value})),a={x:i[2],y:n.value};return e.push(a),e.push({x:i[3],y:0}),e},t}();function d(t,e){var n={values:[]};return e.forEach((function(e,r){var i=e.eval(t);0!=i&&n.values.push({distance:r,value:i})})),n}function f(t){if(0==t.length)return 0;for(var e=0,n=0,r=0;r<t.length-1;r++){var i=t[r],a=t[r+1];e+=a.x*i.y-i.x*a.y,n+=(i.x+a.x)*(a.x*i.y-i.x*a.y)}return n/e/3}n(1);var p=new(function(){function t(){this.html_by_param=new Map;this.html_raw_distance=new Array(5),this.html_by_distance=new Array(5).fill(1).map((function(){return new Map})),this.html_by_target=new Map;var t=document.getElementById("sensors-fuzzy"),e=document.getElementById("sensor-fuzzy-target"),n=document.createElement("section");t.append(n),n.innerHTML="<header>Пиксели</header>";for(var a=0;a<5;a++){var s=document.createElement("section");s.classList.add("outparams");var o=document.createElement("section");for(var c in this.html_raw_distance[a]=o,s.append(o),r){if(Number.isNaN(parseInt(c)))if(!l(g=r[c])){var h=document.createElement("section");this.html_by_distance[a].set(g,h),s.append(h)}}t.append(s)}for(var c in r){if(Number.isNaN(parseInt(c)))if(l(g=r[c])){var d=document.createElement("article");(m=document.createElement("header")).innerText=c;h=document.createElement("section");d.append(m,h),this.html_by_target.set(g,h),e.append(d)}else{var f=document.createElement("header");f.innerText=c,n.append(f)}}var p=document.getElementById("fuzzy-speed"),_=document.getElementById("fuzzy-turn");for(var c in i)if(Number.isNaN(parseInt(c))){var m;d=document.createElement("article");(m=document.createElement("header")).innerText=c;h=document.createElement("section");d.append(m,h);var g=i[c];this.html_by_param.set(g,h),u(g)?p.append(d):_.append(d)}}return t.prototype.print_sensors_distance=function(t){this.html_raw_distance.forEach((function(e,n){return e.innerHTML=Number.isFinite(t[n])?t[n].toString():"&#8734"}))},t.prototype.print_sensors_fuzzy=function(t){var e=this;this.html_by_target.forEach((function(t,e){t.innerText="0"})),t.forEach((function(t,n){var r=null;n<e.html_by_distance.length?(r=e.html_by_distance[n]).forEach((function(t,e){t.innerText="0"})):r=e.html_by_target,r&&t.values.forEach((function(t){return(null==r?void 0:r.get(t.distance)).innerText=t.value.toFixed(2).toString()}))}))},t.prototype.print_fuzzy_speed=function(t){this.print_fuzzy_out_params(t,u)},t.prototype.print_fuzzy_turn=function(t){this.print_fuzzy_out_params(t,(function(t){return!u(t)}))},t.prototype.print_fuzzy_out_params=function(t,e){var n=this;this.html_by_param.forEach((function(t,n){e(n)&&(t.innerText="0")})),t.forEach((function(t){return n.html_by_param.get(t.param).innerText=(e=t.value,Number.isFinite(e)?e.toFixed(2).toString():"&#8734");var e}))},t}()),_=function(){function t(t,e){if(t.length>7)throw"INCORRECT ANTECEDENT IN RULE";this.antecedent=t;for(var n=0;n<7-t.length;n++)this.antecedent.push(null);this.consequent=e}return t.prototype.apply=function(t){for(var e=1,n=function(n){if(null==r.antecedent[n])return"continue";var i=r.antecedent[n],a=t[n].values.filter((function(t){return 0!=(t.distance&i)}));if(0==a.length)return{value:null};var s=Math.max.apply(Math,a.map((function(t){return t.value})));s<e&&(e=s)},r=this,i=0;i<7;i++){var a=n(i);if("object"==typeof a)return a.value}return{param:this.consequent,value:e}},t}(),m=[new _([null,null,r.Far,null,null,null,r.TFar],i.Medium),new _([null,null,r.Medium,null,null,r.TFar],i.Medium),new _([null,null,r.Close,null,null,r.TFar],i.Slow),new _([null,null,r.VeryClose,null,null],i.VerySlow),new _([null,null,null,null,null,null,r.TClose],i.VerySlow),new _([null,r.Medium,r.Medium,r.Far,null],i.Right),new _([null,v(r.Close),v(r.Close),g(r.Medium),null],i.StrongRight),new _([null,r.VeryClose,null,g(r.Close),null],i.StrongRight),new _([null,r.Far,r.Medium,r.Medium,null],i.Left),new _([null,g(r.Medium),v(r.Close),v(r.Close),null],i.StrongLeft),new _([null,g(r.Close),null,r.VeryClose,null],i.StrongLeft),new _([null,r.Far,g(r.Far),null,g(r.Medium),r.TStrongLeft],i.StrongLeft),new _([null,r.Far,g(r.Far),null,g(r.Medium),r.TLeft],i.Left),new _([g(r.Medium),null,g(r.Far),r.Far,null,r.TStrongRight],i.StrongRight),new _([g(r.Medium),null,g(r.Far),r.Far,null,r.TRight],i.Right),new _([null,r.Far,v(r.Medium),r.Far,null],i.StrongLeft),new _([null,r.Medium,r.Medium,r.Medium,null],i.StrongLeft),new _([v(r.Close),r.Far,null,null,null],i.Left),new _([null,null,null,r.Far,v(r.Close)],i.Right),new _([v(r.Close),v(r.Medium),g(r.Far),g(r.Far),g(r.Medium),r.TStrongRight],i.Right),new _([g(r.Medium),g(r.Far),g(r.Far),v(r.Medium),v(r.Close),r.TLeft],i.StrongLeft)];function g(t){return 1024-t}function v(t){return(t<<1)-1}var y=function(){function t(t){this.fuzzy_inputs=[],this.fuzzy_speed=[],this.fuzzy_turn=[],this.output_speed=0,this.output_turn=0,this.logic_methods=new h(t)}return t.prototype.update=function(t,e,n){var r=this;this.fuzzy_inputs=t.map((function(t){return d(t,r.logic_methods.in_dist_funcs)}));var i=d(e,this.logic_methods.in_angl_funcs),a=d(n,this.logic_methods.in_t_dist_funcs);this.fuzzy_inputs.push(i,a),this.eval_fuzzy_out_params(),this.output_speed=f(this.logic_methods.merge_params(this.fuzzy_speed)),this.output_turn=f(this.logic_methods.merge_params(this.fuzzy_turn)),this.print_info()},t.prototype.reset_outputs=function(){this.fuzzy_speed=[],this.fuzzy_turn=[]},t.prototype.eval_fuzzy_out_params=function(){this.reset_outputs();for(var t=0,e=m;t<e.length;t++){var n=e[t].apply(this.fuzzy_inputs);null!=n&&(u(n.param)?this.add_out_param(n,this.fuzzy_speed):this.add_out_param(n,this.fuzzy_turn))}},t.prototype.add_out_param=function(t,e){for(var n=0;n<e.length;){var r=e[n];if(t.param<r.param)break;if(t.param==r.param)return void(t.value>r.value&&(r.value=t.value));n++}e.splice(n,0,t)},t.prototype.print_info=function(){p.print_sensors_fuzzy(this.fuzzy_inputs),p.print_fuzzy_speed(this.fuzzy_speed),p.print_fuzzy_turn(this.fuzzy_turn)},t}(),w=Math.PI,x=function(){function t(t,e){var n=(t-5)/10;this.distance=[0,0,20,27,35,40,45,95,1/0,1/0].map((function(t){return t*n})),this.angle=[-w,-w,-3*w/4,-w/4,-w/4,w/4,w/4,3*w/4,w,w],this.target_dist=[0,0,2,3,1/0,1/0].map((function(t){return t*Math.max(e,100)})),this.speed=[0,0,0,15,18,20,e*(4/6),e*(5/6),1*e,1*e],this.turn=[-4*w/4,-4*w/4,-4*w/4,-w/4,w/4,w/4,w/4,4*w/4,4*w/4,4*w/4]}return t.validate_input_values=function(t,e,n){return(e>=7*t||e>=105)&&n>20&&n<=200&&t>5&&t<25},t}();new x(15,100);var M,z=(M=function(t,e){return(M=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}M(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),b=function(t,e){this.value=0,this.distance=t,this.angle=e},E=function(){this.angle=0,this.distance=0},T=function(){function t(t,e){this.view=t,this.coordinates=e.coordinates,this.angle=e.angle,this.speed=0,this.necessary_speed=100,this.wheel_angle=0,this.turn_radius=e.turn_radius,this.max_speed=e.max_speed,this.acceleration=e.acceleration,this.sensors=[new b(e.sensor_len,-Math.PI/2),new b(e.sensor_len,-Math.PI/4),new b(e.sensor_len,0),new b(e.sensor_len,Math.PI/4),new b(e.sensor_len,Math.PI/2)],this.target=new E,this.status=new y(new x(e.turn_radius,e.max_speed))}return Object.defineProperty(t.prototype,"height",{get:function(){return this.view.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.view.width},enumerable:!0,configurable:!0}),t}(),S=function(t){function e(e,n,r){var i=t.call(this,function(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var n=e.getContext("2d");if(!n)throw"Не получилось получить невидимый контекст невиданного канваса";return n.drawImage(t,0,0),n.getImageData(0,0,t.width,t.height)}(e))||this;return i.stage=e,i.car=n,i.target=r,i}return z(e,t),e.prototype.actors=function(){return[this.car]},e}(function(){function t(t){this.height=t.height,this.width=t.width,this.map=new Uint8Array(t.height*t.width);for(var e=function(e){n.map[e]=[0,1,2].map((function(n){return t.data[4*e+n]})).reduce((function(t,e){return Math.min(t,e)}))},n=this,r=0;r<this.map.length;r++)e(r)}return t.prototype.is_barrier=function(t){return t.x<0||t.y<0||t.x>this.width||t.y>this.height||255!==this.map[t.x+t.y*this.width]},t}()),I=function(){function t(t){this._map=t}return t.prototype.line_x=function(t,e,n){return(n-t.y)*(e.x-t.x)/(e.y-t.y)+t.x},t.prototype.my_max=function(t,e){return isNaN(t)?e:isNaN(e)?t:Math.max(t,e)},t.prototype.my_min=function(t,e){return isNaN(t)?e:isNaN(e)?t:Math.min(t,e)},t.prototype.update_sensor=function(t,e,n){for(var r=t.angle+n,i=Math.sin(r),s=Math.cos(r),o=0;o<t.distance;++o)if(this._map.is_barrier(e.add(new a(-o*i,o*s)).round()))return void(t.value=o);t.value=1/0},t.prototype.recorrect_angle=function(t){return t>Math.PI&&(t-=2*Math.PI),t<-Math.PI&&(t+=2*Math.PI),t},t.prototype.tick=function(t){for(var e=this,n=this._map.actors(),r=function(r){var s=n[r],o=Math.sin(s.angle),u=Math.cos(s.angle),l=s.coordinates,c=s.angle,h=s.speed*t;s.coordinates=s.coordinates.add(new a(-h*o,h*u));var d=Math.min(Math.abs(s.wheel_angle),Math.PI/4)*Math.sign(s.wheel_angle),f=2*s.turn_radius*Math.sqrt(1/Math.pow(Math.sin(d),2)-3/4);s.angle=i.recorrect_angle(s.angle+Math.sign(d)*h/f);var p=Math.min(Math.abs(s.necessary_speed),s.max_speed)*Math.sign(s.necessary_speed);s.speed>p&&(s.speed-=s.acceleration*t),s.speed<p&&(s.speed+=s.acceleration*t);for(var _=s.width/2,m=s.height/2,g=_*u-m*o,v=_*u+m*o,y=_*o+m*u,w=_*o-m*u,x=[new a(g,y),new a(v,w),new a(-g,-y),new a(-v,-w)],M=x[0].y,z=0,b=1;b<4;++b)x[b].y>M&&(M=x[b].y,z=b);for(var E=x[z].add(s.coordinates),T=x[(z+1)%4].add(s.coordinates),S=x[(z+2)%4].add(s.coordinates),I=x[(z+3)%4].add(s.coordinates),L=!1,F=Math.round(S.y);F<E.y&&!L;++F)for(var C=i.my_max(i.line_x(S,I,F),i.line_x(I,E,F)),P=i.my_min(i.line_x(S,T,F),i.line_x(T,E,F)),N=Math.round(C);N<P&&!L;++N)i._map.is_barrier(new a(N,F))&&(L=!0);L&&(s.coordinates=l,s.angle=c,s.speed=0),s.sensors.forEach((function(t){return e.update_sensor(t,s.coordinates,s.angle)}));var R=i._map.target.sub(s.coordinates);s.target.distance=Math.sqrt(R.x*R.x+R.y*R.y);var B=Math.acos(R.y/s.target.distance);s.target.angle=i.recorrect_angle(-Math.sign(R.x)*B-s.angle)},i=this,s=0;s<n.length;++s)r(s)},t}(),L=function(){function t(t){this._map=t}return t.prototype.tick=function(t){this._map.actors().forEach((function(t){var e=t.sensors.map((function(t){return t.value}));p.print_sensors_distance(e),t.status.update(e,t.target.angle,t.target.distance),t.necessary_speed=t.status.output_speed,t.wheel_angle=t.status.output_turn,t.target.distance<20&&(t.necessary_speed=0)}))},t}(),F={turn_radius:15,max_speed:100,acceleration:10,sensor_len:105,coordinates:new a(750,750),angle:0},C=new a(50,50),P=function(){function t(t){this.drawer=t,this.context=null,this.pause=!1,this.lastTimer=0,this.dt=.05}return t.prototype.setTarget=function(t){null!=this.context&&(this.context.map.target=t)},t.prototype.startSimulation=function(t){var e=this,n=new S(t.map,new T(t.car,t.car_settings),t.target);n.car.coordinates=t.car_settings.coordinates;var r=new I(n);this.context={map:n,car:n.car};var i=new L(n);this.timerCallback=function(){e.pause||(r.tick(e.dt),i.tick(e.dt)),e.drawer.draw(n)},this.restartTimer(t.time)},t.prototype.restartTimer=function(t){0!==this.lastTimer&&window.clearInterval(this.lastTimer),this.lastTimer=window.setInterval(this.timerCallback,1e3*this.dt/t)},t}();n(2);document.getElementById("max-speed").value=F.max_speed.toString(),document.getElementById("turn-radius").value=F.turn_radius.toString(),document.getElementById("sensor-length").value=F.sensor_len.toString();var N=document.getElementById("main"),R=new s(N),B=new P(R),O=document.getElementById("start-button");function j(){B.pause=!0,O.textContent="Continue"}function k(){B.pause=!1,O.textContent="Pause"}O.addEventListener("click",(function(t){B.pause?k():j()})),k(),Promise.all(["circus2.png","small_car.png"].map((function(t){return o("./resources/"+t)}))).then((function(t){var e={map:t[0],car:t[1],car_settings:F,target:C,time:1};B.startSimulation(e),document.getElementById("map-settings").addEventListener("submit",(function(t){var n,r,i=document.querySelector('input[type="file"]'),a=null===(n=null==i?void 0:i.files)||void 0===n?void 0:n.item(0);a&&(r=a,new Promise((function(t,e){var n=new FileReader;n.addEventListener("load",(function(e){t(n.result)})),n.addEventListener("error",e),n.readAsDataURL(r)}))).then(o).then((function(t){e.map=t,j(),B.startSimulation(e)})),t.preventDefault()})),document.getElementById("car-settings").addEventListener("submit",(function(t){t.preventDefault();var n=parseInt(document.getElementById("max-speed").value),r=parseInt(document.getElementById("turn-radius").value),i=parseInt(document.getElementById("sensor-length").value);if(null!=n&&null!=r&&null!=i){if(!x.validate_input_values(r,i,n))return void alert("Некорректные входные данные: \n"+x.validate_input_values.toString());e.car_settings.max_speed=n,e.car_settings.turn_radius=r,e.car_settings.sensor_len=i,j(),B.startSimulation(e)}}));var n=document.getElementById("tardis");n.addEventListener("submit",(function(t){t.preventDefault(),e.time=n.querySelector('input[type="number"]').valueAsNumber,B.restartTimer(e.time)})),N.addEventListener("click",(function(t){t.preventDefault();var n=t.pageX-N.offsetLeft,r=t.pageY-N.offsetTop;e.target=R.scale(new a(n,r)),B.setTarget(e.target)})),N.addEventListener("auxclick",(function(t){t.preventDefault();var n=t.pageX-N.offsetLeft,r=t.pageY-N.offsetTop;e.car_settings.coordinates=R.scale(new a(n,r)),j(),B.startSimulation(e)})),N.addEventListener("wheel",(function(t){t.preventDefault(),B.pause&&(null!=B.context&&(e.car_settings.coordinates=B.context.car.coordinates),e.car_settings.angle+=.002*t.deltaY,B.startSimulation(e))}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,